name: Sync Issues to Google Sheets
on:
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned, labeled, unlabeled]
    
jobs:
  sync-to-sheets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install google-api-python-client google-auth requests
      
      - name: Get Board Custom Fields
        id: get-board-fields
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os
          
          def get_board_fields(issue_node_id):
              github_token = os.environ.get('GITHUB_TOKEN')
              if not github_token:
                  print("GITHUB_TOKEN não configurado, pulando busca de custom fields")
                  return {"Status": "", "Substatus": ""}
              
              query = """
              query GetIssueProjectFields($nodeId: ID!) {
                  node(id: $nodeId) {
                      ... on Issue {
                          projectItems(first: 100) {
                              nodes {
                                  id
                                  fieldValues(first: 100) {
                                      nodes {
                                          ...SelectedStatus
                                          ...Substatus
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              
              fragment SelectedStatus on ProjectV2ItemFieldSingleSelectValue {
                  name
                  field {
                      ... on ProjectV2SingleSelectField {
                          name
                      }
                  }
              }
              
              fragment Substatus on ProjectV2ItemFieldTextValue {
                  text
                  field {
                      ... on ProjectV2Field {
                          name
                      }
                  }
              }
              """
              
              try:
                  response = requests.post(
                      "https://api.github.com/graphql",
                      json={
                          "query": query,
                          "variables": {"nodeId": issue_node_id}
                      },
                      headers={
                          "Authorization": f"Bearer {github_token}",
                          "Content-Type": "application/json"
                      }
                  )
                  
                  data = response.json()
                  
                  if data.get('errors'):
                      print("Erro na query GraphQL:", data['errors'])
                      return {"Status": "", "Substatus": ""}
                  
                  project_items = data.get('data', {}).get('node', {}).get('projectItems', {}).get('nodes', [])
                  status = ""
                  substatus = ""
                  
                  for item in project_items:
                      for field_value in item.get('fieldValues', {}).get('nodes', []):
                          field_name = field_value.get('field', {}).get('name', '')
                          if field_name == "Status":
                              status = field_value.get('name', '') or field_value.get('text', '')
                          elif field_name == "Substatus":
                              substatus = field_value.get('name', '') or field_value.get('text', '')
                  
                  return {"Status": status, "Substatus": substatus}
                  
              except Exception as e:
                  print("Erro ao buscar dados do board:", e)
                  return {"Status": "", "Substatus": ""}
          
          # Processar dados da issue
          issue_data = json.loads('''${{ toJson(github.event.issue) }}''')
          
          project_data = get_board_fields(issue_data['node_id'])
          
          from datetime import datetime
          
          def format_date(date_str):
              dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
              return dt.strftime('%d/%m/%Y')
          
          row_data = {
              "Título": issue_data['title'],
              "Estado": issue_data['state'],
              "URL": issue_data['html_url'],
              "Data Criação": format_date(issue_data['created_at']),
              "Data Atualização": format_date(issue_data['updated_at']),
              "Assignee": issue_data['assignee']['login'] if issue_data.get('assignee') else "",
              "Descrição": issue_data.get('body', ''),
              "Labels": ', '.join([label['name'] for label in issue_data.get('labels', [])]),
              "Status": project_data['Status'],
              "Substatus": project_data['Substatus']
          }
          
          # Salvar dados processados
          with open('issue_data.json', 'w', encoding='utf-8') as f:
              json.dump(row_data, f, ensure_ascii=False, indent=2)
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Update Google Sheets
        run: |
          python3 << 'EOF'
          import json
          import os
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          
          def get_first_sheet_name(service, spreadsheet_id):
              try:
                  spreadsheet = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
                  sheets = spreadsheet.get('sheets', [])
                  
                  if not sheets:
                      raise Exception("Nenhuma aba encontrada na planilha!")
                  
                  # Retorna o nome da primeira aba
                  first_sheet_name = sheets[0]['properties']['title']
                  print(f"Primeira aba encontrada: {first_sheet_name}")
                  return first_sheet_name
                  
              except Exception as e:
                  print(f"Erro ao obter nome da primeira aba:", e)
                  raise
          
          def add_to_sheet(data):
              try:
                  credentials_json = os.environ['GOOGLE_SERVICE_ACCOUNT_CREDENTIALS']
                  credentials_info = json.loads(credentials_json)
                  
                  credentials = service_account.Credentials.from_service_account_info(
                      credentials_info,
                      scopes=['https://www.googleapis.com/auth/spreadsheets']
                  )
                  
                  service = build('sheets', 'v4', credentials=credentials)
                  spreadsheet_id = os.environ['GOOGLE_SPREADSHEET_ID']
                  
                  # Obter o nome da primeira aba
                  first_sheet_name = get_first_sheet_name(service, spreadsheet_id)
                  
                  # Buscar dados existentes na primeira aba
                  sheet_range = f"'{first_sheet_name}'!A:Z"
                  
                  try:
                      result = service.spreadsheets().values().get(
                          spreadsheetId=spreadsheet_id,
                          range=sheet_range
                      ).execute()
                      
                      existing_data = result.get('values', [])
                      
                      if not existing_data:
                          print("Erro: Planilha vazia - Cabeçalho deve estar presente!")
                          return
                      
                      # Buscar linha existente pela URL
                      headers = existing_data[0] if existing_data else []
                      url_column_index = None
                      
                      try:
                          url_column_index = headers.index('URL')
                      except ValueError:
                          print("Coluna URL não encontrada")
                          return
                      
                      existing_row_index = None
                      for i, row in enumerate(existing_data[1:], start=2):  # Pular cabeçalho
                          if len(row) > url_column_index and row[url_column_index] == data['URL']:
                              existing_row_index = i
                              break
                      
                      new_row = []
                      for header in headers:
                          new_row.append(data.get(header, ''))
                      
                      if existing_row_index:
                          range_name = f"'{first_sheet_name}'!A{existing_row_index}:Z{existing_row_index}"
                          service.spreadsheets().values().update(
                              spreadsheetId=spreadsheet_id,
                              range=range_name,
                              valueInputOption='RAW',
                              body={'values': [new_row]}
                          ).execute()
                          print("Linha atualizada:", data)
                          return None
                      else:
                          next_row = len(existing_data) + 1
                          range_name = f"'{first_sheet_name}'!A{next_row}:Z{next_row}"
                          service.spreadsheets().values().update(
                              spreadsheetId=spreadsheet_id,
                              range=range_name,
                              valueInputOption='RAW',
                              body={'values': [new_row]}
                          ).execute()
                          print("Linha adicionada:", data)
                          return {
                              'row_number': next_row,
                              'sheet_name': first_sheet_name,
                              'spreadsheet_id': spreadsheet_id
                          }
                      
                  except Exception as e:
                      print("Erro ao processar planilha:", e)
                      raise
                      
              except Exception as e:
                  print("Erro ao adicionar linha:", e)
                  raise
          
          # Carregar dados processados
          with open('issue_data.json', 'r', encoding='utf-8') as f:
              row_data = json.load(f)
          
          result = add_to_sheet(row_data)

          # Salvar resultado para próxima etapa
          with open('sheet_result.json', 'w', encoding='utf-8') as f:
              json.dump(result, f, ensure_ascii=False, indent=2)
          EOF
        env:
          GOOGLE_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
          GOOGLE_SPREADSHEET_ID: ${{ secrets.GOOGLE_SPREADSHEET_ID }}

      - name: Update Issue Description
        run: |
          python3 << 'EOF'
          import json
          import os
          import requests
          
          def update_issue_description():
              # Verificar se uma nova linha foi criada
              with open('sheet_result.json', 'r', encoding='utf-8') as f:
                  sheet_result = json.load(f)
              
              if not sheet_result:
                  print("Nenhuma nova linha criada - pulando atualização da issue")
                  return
              
              if "Localização" in current_body and "planilha de estimativas" in current_body:
                  print("Link da planilha já existe na descrição - pulando atualização")
                  return

              # Dados da issue
              issue_data = json.loads('''${{ toJson(github.event.issue) }}''')
              current_body = issue_data.get('body', '') or ''
              
              # Construir o link para a linha específica
              spreadsheet_id = sheet_result['spreadsheet_id']
              sheet_name = sheet_result['sheet_name']
              row_number = sheet_result['row_number']
              
              # Adicionar o link no final da descrição
              new_body = current_body
              if new_body:
                  new_body += "\n\n"
              new_body += f"[Localização](https://docs.google.com/spreadsheets/d/{spreadsheet_id}/edit?gid=0#gid=0&range=A{row_number}) na planilha de estimativas"
              
              github_token = os.environ.get('GITHUB_TOKEN')
              if not github_token:
                  print("GITHUB_TOKEN não configurado")
                  return
              
              repo_full_name = '${{ github.repository }}'
              issue_number = issue_data['number']
              
              update_url = f"https://api.github.com/repos/{repo_full_name}/issues/{issue_number}"
              
              response = requests.patch(
                  update_url,
                  json={'body': new_body},
                  headers={
                      'Authorization': f'Bearer {github_token}',
                      'Accept': 'application/vnd.github.v3+json'
                  }
              )
              
              if response.status_code == 200:
                  print("Descrição da issue atualizada com sucesso!")
              else:
                  print(f"Erro ao atualizar issue: {response.status_code} - {response.text}")
          
          update_issue_description()
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Log Success
        run: |
          echo "Issue sincronizada com sucesso!"
